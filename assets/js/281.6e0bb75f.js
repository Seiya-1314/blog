(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{445:function(t,n,e){"use strict";e.r(n);var r=e(0),s=Object(r.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("br"),t._v(" "),e("author",{attrs:{time:"2019年05月27日"}}),t._v(" "),e("br"),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),e("br"),t._v(" "),t._m(6),t._v(" "),e("br"),t._v(" "),t._m(7),t._v(" "),e("br"),t._v(" "),t._m(8),t._v(" "),e("br"),t._v(" "),t._m(9),t._v(" "),e("br"),t._v(" "),t._m(10),t._v(" "),e("br"),t._v(" "),t._m(11),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),t._m(12),t._v(" "),e("p",[t._v("任意值（Any）用来表示允许赋值为任意类型。如果是一个普通类型，在赋值过程中改变类型是不被允许的：")]),t._v(" "),t._m(13),e("br"),t._v(" "),e("p",[t._v("但如果是 any 类型，则允许被赋值为任意类型：")]),t._v(" "),t._m(14),e("br"),t._v(" "),t._m(15),t._v(" "),e("br"),t._v(" "),t._m(16)],1)},[function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"typescript-原始数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript-原始数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" TypeScript 原始数据类型")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("p",[e("code",[t._v("TypeScript")]),t._v(" 是微软开发一款开源的编程语言，本质上是向 "),e("code",[t._v("JavaScript")]),t._v(" 增加静态类型系统。它在语法设计上首先考虑的就是兼容 "),e("code",[t._v("JavaScript")]),t._v("，或者说对 "),e("code",[t._v("JavaScript")]),t._v(" 的语法做扩展，基本上是在 "),e("code",[t._v("JavaScript")]),t._v(" 的基础之上增加了一些类型标记语法，以实现静态类型分析。它是 "),e("code",[t._v("JavaScript")]),t._v(" 的超集，所有现有的 "),e("code",[t._v("JavaScript")]),t._v(" 都可以不加改变就在其中使用。它是为大型软件开发而设计的，它最终编译产生 "),e("code",[t._v("JavaScript")]),t._v("，所以可以运行在浏览器、`Node.js`` 等等的运行时环境。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"原始数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 原始数据类型")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("JavaScript 的类型分为两种："),n("strong",[this._v("原始数据类型")]),this._v("（Primitive data types）和 "),n("strong",[this._v("对象类型")]),this._v("（Object types）。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[this._v("原始数据类型包括：")]),this._v(" "),n("p",[this._v("布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("布尔值（boolean）")])]),this._v(" "),n("pre",[n("code",[this._v("\t布尔值是最基础的数据类型，在 `TypeScript` 中，使用 `boolean` 定义布尔值类型:\n\n\t```ts\n\tlet isDone: boolean = false;\n\t```\n\n\t<br>\n\n\t::: warning 注意：使用构造函数 Boolean 创造的是对象不是布尔值\n\tlet createdByNewBoolean: boolean = new Boolean(1);\n\n\t// index.ts(1,5): error TS2322: Type 'Boolean' is not assignable to type 'boolean'.\n\t:::\n\n\t在 `JavaScript` `中，boolean` 是 `JavaScript` 中的基本类型，而 `Boolean` 是 `JavaScript` 中的构造函数。其他基本类型（除了 `null` 和 `undefined` ）一样，不再赘述。\n")])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("数值（number）")])]),this._v(" "),n("pre",[n("code",[this._v("\t```ts\n\tlet decLiteral: number = 6;\n\tlet hexLiteral: number = 0xf00d;\n\tlet binaryLiteral: number = 0b1010;\t\t// ES6 中的二进制表示法\n\tlet octalLiteral: number = 0o744;\t\t// ES6 中的八进制表示法\n\tlet notANumber: number = NaN;\n\tlet infinityNumber: number = Infinity;\n\n\t// 编译结果\n\tvar decLiteral = 6;\n\tvar hexLiteral = 0xf00d;\n\tvar binaryLiteral = 10;\n\tvar octalLiteral = 484;\n\tvar notANumber = NaN;\n\tvar infinityNumber = Infinity;\n\t```\n\n\t::: warning 注意：\n\t其中 0b1010 和 0o744 是 ES6 中的二进制和八进制表示法，它们会被编译为十进制数字。\n\t:::\n")])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("字符串（string）")])]),this._v(" "),n("pre",[n("code",[this._v('\t```ts\n\t// 模板字符串\n\tlet sentence: string = `Hello, my name is ${myName}.\n\tI\'ll be ${myAge + 1} years old next month.`;\n\n\t// 编译结果\n\tvar sentence = "Hello, my name is " + myName + ".\\nI\'ll be " + (myAge + 1) +\n\t\t\t\t\t" years old next month.";\n\t```\n\n\t::: warning 注意：\n\t其中 ` 用来定义 ES6 中的模板字符串，当定义多行字符串时，结尾的换行符也会进行编译。${expr} 用来在模板字符串中嵌入表达式。\n\t:::\n')])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("空值（null）")])]),this._v(" "),n("pre",[n("code",[this._v("\t`JavaScript` 没有空值 `Void` 的概念，在 `TypeScript` 中，可以用 `void` 表示没有任何返回值的函数：\n\n\t```ts\n\tfunction alertName(): void {\n")])]),this._v(" "),n("p",[this._v("alert('My name is Tom');\n}")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("\n    \t::: warning 注意：\n    \t声明一个 `void` 类型的变量没有什么用，因为你只能将它赋值为 `undefined` 和 `null`。\n    \t:::\n\n")])])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("Null 和 Undefined")])]),this._v(" "),n("pre",[n("code",[this._v("\t在 `TypeScript` 中，可以使用 `null` 和 `undefined` 来定义这两个原始数据类型：\n\n\t```ts\n\tlet u: undefined = undefined;\n\tlet n: null = null;\n\t```\n\n\t::: warning 注意：\n\t`undefined` 类型的变量只能被赋值为 `undefined`，`null` 类型的变量只能被赋值为 `null`。\n\t:::\n\n\t<br>\n\n\t与 `void` 的区别是，`undefined` 和 `null` 是所有类型的子类型。也就是说 `undefined` 类型的变量，可以赋值给 `number` 类型的变量，而 `void` 类型的变量不能赋值给 `number` 类型的变量\n\n\t```ts\n\t// 这样不会报错\n\tlet num: number = undefined;\n\n\tlet u: void;\n\tlet num: number = u;\n\t// index.ts(2,5): error TS2322: Type 'void' is not assignable to type 'number'.\n\t```\n")])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("sympol")])]),this._v(" "),n("pre",[n("code",[this._v('\t`ES5` 的对象属性名都是字符串，这容易造成属性名的冲突。所以 `ES6` 引入了 `Symbol` 类型，保证每个属性的名字都是独一无二的，这样就从根本上防止属性名的冲突。\n\n\t`Symbol` 值通过 `Symbol` 函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 `Symbol` 类型。凡是属性名属于 `Symbol` 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n\n\t```ts\n\tlet s = Symbol();\n\n\ttypeof s\n\t// "symbol"\n\t```\n\n\t::: warning 注意：\n\t`Symbol` 函数前不能使用new命令，否则会报错。这是因为生成的 `Symbol` 是一个原始类型的值，不是对象。也就是说，由于 `Symbol` 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。\n\t:::\n')])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"任意值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任意值","aria-hidden":"true"}},[this._v("#")]),this._v(" 任意值")])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myFavoriteNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'seven'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyFavoriteNumber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.")]),t._v("\n")])])])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myFavoriteNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'seven'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyFavoriteNumber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("任意值的属性和方法")])]),this._v(" "),n("pre",[n("code",[this._v("\t在任意值上访问任何属性都是允许的，也允许调用任何方法。可以认为，**声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。**\n")])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[this._v("未声明类型的变量")])]),this._v(" "),n("pre",[n("code",[this._v("\t变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。\n")])])])])}],!1,null,null,null);n.default=s.exports}}]);
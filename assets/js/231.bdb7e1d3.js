(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{643:function(t,e,s){"use strict";s.r(e);var r=s(0),n=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("br"),t._v(" "),s("author",{attrs:{time:"2019年08月28日"}}),t._v(" "),s("br"),t._v(" "),t._m(1),t._v(" "),s("br"),t._v(" "),s("p",[t._v("ES5 提供了 Object.defineProperty 方法，该方法可以在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。参数如下：")]),t._v(" "),t._m(2),t._v(" "),s("br"),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),s("br"),t._v(" "),t._m(5),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("存取描述符中的 get 和 set，又被称为 getter 和 setter。由 getter 和 setter 定义的属性称做”存取器属性“。")]),t._v(" "),s("br"),t._v(" "),t._m(7),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("使用 defineProperty 只能重定义属性的读取（get）和设置（set）行为，到了 ES6，提供了 Proxy，可以重定义更多的行为，比如 in、delete、函数调用等更多行为。")]),t._v(" "),t._m(9),t._v(" "),s("br"),t._v(" "),s("p",[t._v("Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。")]),t._v(" "),s("br"),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),s("br"),t._v(" "),s("p",[t._v("我们可以这样使用：")]),t._v(" "),t._m(13),s("br"),t._v(" "),s("p",[t._v("除了 get 和 set 之外，proxy 可以拦截多达 13 种操作：")]),t._v(" "),t._m(14),t._v(" "),s("br"),t._v(" "),s("p",[t._v("关于以上拦截行为的具体用法，可以查看阮一峰老师的 《"),s("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 6 入门"),s("OutboundLink")],1),t._v("》")])],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"es6-之-defineproperty-与-proxy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-之-defineproperty-与-proxy","aria-hidden":"true"}},[this._v("#")]),this._v(" ES6 之 defineProperty 与 proxy")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"object-defineproperty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty","aria-hidden":"true"}},[this._v("#")]),this._v(" Object.defineProperty")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[s("strong",[s("code",[t._v("obj")])]),t._v(": 要在其上定义属性的对象。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("prop")])]),t._v(":  要定义或修改的属性的名称。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("descriptor")])]),t._v(": 将被定义或修改的属性的描述符。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("简单介绍 "),e("code",[this._v("descriptor")]),this._v(" 的几个属性：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[s("code",[t._v("enumerable")]),t._v("：属性是否可枚举，默认 false。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("configurable")]),t._v("：属性是否可以被修改或者删除，默认 false。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("writable")]),t._v("：属性是否可以被赋值运算符改变，默认 false。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("get")]),t._v("：获取属性的方法。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("set")]),t._v("：设置属性的方法。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("注意：")]),this._v(" "),e("p",[this._v("属性描述符必须是数据描述符或者存取描述符两种形式之一，不能同时是两者。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"setters-和-getters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setters-和-getters","aria-hidden":"true"}},[this._v("#")]),this._v(" Setters 和 Getters")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[e("strong",[this._v("当程序查询存取器属性的值时，JavaScript 调用 getter 方法。这个方法的返回值就是属性存取表达式的值。")])])]),this._v(" "),e("li",[e("p",[e("strong",[this._v("当程序设置一个存取器属性的值时，JavaScript 调用 setter 方法，将赋值表达式右侧的值当做参数传入 setter。从某种意义上讲，这个方法负责“设置”属性值。")]),this._v(" 可以忽略 setter 方法的返回值。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"proxy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy","aria-hidden":"true"}},[this._v("#")]),this._v(" proxy")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"proxy-的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy-的使用","aria-hidden":"true"}},[this._v("#")]),this._v(" proxy 的使用")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" proxy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[e("code",[this._v("target")]),this._v(" 参数表示所要拦截的目标对象；")])]),this._v(" "),e("li",[e("p",[e("code",[this._v("handler")]),this._v(" 参数也是一个对象，用来定制拦截行为；")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" proxy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'设置 get 操作'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'设置 set 操作'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[s("code",[t._v("handler.apply()")]),t._v(" 方法用于拦截函数的调用。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.construct()")]),t._v(" 方法用于拦截new 操作符. 为了使 new 操作符在生成的 Proxy 对象上生效，用于初始化代理的目标对象自身必须具有[[Construct]]内部方法。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.defineProperty()")]),t._v(" 用于拦截对对象的 Object.defineProperty() 操作。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.deleteProperty()")]),t._v(" 方法用于拦截对对象属性的 delete 操作。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.get()")]),t._v(" 方法用于拦截对象的读取属性操作。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.getOwnPropertyDescriptor()")]),t._v(" 方法是 Object.getOwnPropertyDescriptor()  的钩子。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.getPrototypeOf()")]),t._v(" 是一个代理方法，当读取代理对象的原型时，该方法就会被调用。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.has()")]),t._v(" 方法是针对 in 操作符的代理方法。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.isExtensible()")]),t._v(" 方法用于拦截对对象的Object.isExtensible()。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.ownKeys()")]),t._v(" 方法用于拦截 Reflect.ownKeys()，也就是拦截对象自身属性的读取操作。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.preventExtensions()")]),t._v(" 方法用于设置对 Object.preventExtensions() 的拦截。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.set()")]),t._v(" 方法用于拦截设置属性值的操作。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("handler.setPrototypeOf()")]),t._v(" 方法主要用来拦截 Object.setPrototypeOf()")])])])}],!1,null,null,null);e.default=n.exports}}]);
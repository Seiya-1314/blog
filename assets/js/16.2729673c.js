(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{307:function(t,_,r){t.exports=r.p+"assets/img/2-1.0357fd6f.jpg"},308:function(t,_,r){t.exports=r.p+"assets/img/2-2.29062e22.png"},309:function(t,_,r){t.exports=r.p+"assets/img/2-3.7625d016.gif"},310:function(t,_,r){t.exports=r.p+"assets/img/2-4.93020984.png"},541:function(t,_,r){"use strict";r.r(_);var s=[function(){var t=this.$createElement,_=this._self._c||t;return _("h1",{attrs:{id:"传输控制协议-tcp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输控制协议-tcp","aria-hidden":"true"}},[this._v("#")]),this._v(" 传输控制协议 TCP")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"tcp-详解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-详解","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 详解")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"tcp-头部"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-头部","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 头部")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("img",{attrs:{src:r(307),alt:""}})])},function(){var t=this,_=t.$createElement,r=t._self._c||_;return r("ul",[r("li",[r("p",[t._v("Sequence number，这个序号保证了 TCP 传输的报文都是有序的，对端可以通过序号顺序的拼接报文；")])]),t._v(" "),r("li",[r("p",[t._v("Acknowledgement Number，这个序号表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到；")])]),t._v(" "),r("li",[r("p",[t._v("Window Size，窗口大小，表示还能接收多少字节的数据，用于流量控制；")])]),t._v(" "),r("li",[r("p",[t._v("标识符：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("URG=1：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。")])]),t._v(" "),r("li",[r("p",[t._v("ACK=1：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。")])]),t._v(" "),r("li",[r("p",[t._v("PSH=1：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。")])]),t._v(" "),r("li",[r("p",[t._v("RST=1：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。")])]),t._v(" "),r("li",[r("p",[t._v("SYN=1：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。")])]),t._v(" "),r("li",[r("p",[t._v("FIN=1：该字段为一表示此报文段是一个释放连接的请求报文。")])])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"tcp-连接过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-连接过程","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 连接过程")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("img",{attrs:{src:r(308),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("第一次握手")])]),this._v(" "),_("p",[this._v("客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。")])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("第二次握手")])]),this._v(" "),_("p",[this._v("服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。")])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("第三次握手")])]),this._v(" "),_("p",[this._v("当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。")])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("img",{attrs:{src:r(309),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("div",{staticClass:"tip custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("tips")]),this._v(" "),_("p",[this._v("第三次握手中可以包含数据，通过快速打开（TFO）技术就可以实现这一功能。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同的 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("div",{staticClass:"warning custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("注意：")]),this._v(" "),_("p",[this._v("TCP 建立连接之所以需要三次握手，而不是两次，是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。")]),this._v(" "),_("p",[this._v("可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求，然后接收数据后释放了连接。")]),this._v(" "),_("p",[this._v("假设这时候连接请求 A 在两端关闭后终于抵达了服务端，那么此时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。但是客户端其实是 CLOSED 的状态，那么就会导致服务端一直等待，造成资源的浪费。")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("div",{staticClass:"tip custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("注意：")]),this._v(" "),_("p",[this._v("在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN Flood 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。")])])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"tcp-断开链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-断开链接","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 断开链接")])},function(){var t=this.$createElement,_=this._self._c||t;return _("p",[_("img",{attrs:{src:r(310),alt:""}})])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("第一次握手")])]),this._v(" "),_("p",[this._v("若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。")])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("第二次握手")])]),this._v(" "),_("p",[this._v("B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。")])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("第三次握手")])]),this._v(" "),_("p",[this._v("B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。")]),this._v(" "),_("div",{staticClass:"tip custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("tips")]),this._v(" "),_("p",[this._v("通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。")])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("第四次握手")])]),this._v(" "),_("p",[this._v("A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。")]),this._v(" "),_("div",{staticClass:"warning custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？")]),this._v(" "),_("p",[this._v("为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。")])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"tcp-的特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的特点","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 的特点")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"面向连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面向连接","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向连接")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"仅支持单播传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#仅支持单播传输","aria-hidden":"true"}},[this._v("#")]),this._v(" 仅支持单播传输")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"面向字节流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面向字节流","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向字节流")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"可靠传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可靠传输","aria-hidden":"true"}},[this._v("#")]),this._v(" 可靠传输")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"提供拥塞控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提供拥塞控制","aria-hidden":"true"}},[this._v("#")]),this._v(" 提供拥塞控制")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"提供全双工通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提供全双工通信","aria-hidden":"true"}},[this._v("#")]),this._v(" 提供全双工通信")])},function(){var t=this.$createElement,_=this._self._c||t;return _("h2",{attrs:{id:"tcp-和-udp-的比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的比较","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 和 UDP 的比较")])},function(){var t=this,_=t.$createElement,r=t._self._c||_;return r("table",[r("thead",[r("tr",[r("th"),t._v(" "),r("th",[t._v("UDP")]),t._v(" "),r("th",[t._v("TCP")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("是否连接")]),t._v(" "),r("td",[t._v("无连接")]),t._v(" "),r("td",[t._v("面向连接")])]),t._v(" "),r("tr",[r("td",[t._v("是否可靠")]),t._v(" "),r("td",[t._v("不可靠传输，不使用流量控制和拥塞控制")]),t._v(" "),r("td",[t._v("可靠传输，使用流量控制和拥塞控制")])]),t._v(" "),r("tr",[r("td",[t._v("连接对象个数")]),t._v(" "),r("td",[t._v("支持一对一，一对多，多对一和多对多交互通信")]),t._v(" "),r("td",[t._v("只能是一对一通信")])]),t._v(" "),r("tr",[r("td",[t._v("传输方式")]),t._v(" "),r("td",[t._v("面向报文")]),t._v(" "),r("td",[t._v("面向字节流")])]),t._v(" "),r("tr",[r("td",[t._v("首部开销")]),t._v(" "),r("td",[t._v("首部开销小，仅8字节")]),t._v(" "),r("td",[t._v("首部最小20字节，最大60字节")])]),t._v(" "),r("tr",[r("td",[t._v("适用场景")]),t._v(" "),r("td",[t._v("适用于实时应用（IP电话、视频会议、直播等）")]),t._v(" "),r("td",[t._v("适用于要求可靠传输的应用，例如文件传输")])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"基于-tcp-实现的协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基于-tcp-实现的协议","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于 TCP 实现的协议")])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[_("code",[this._v("HTTP/HTTPS")])])])]),this._v(" "),_("li",[_("p",[_("strong",[_("code",[this._v("Telnet")])])])]),this._v(" "),_("li",[_("p",[_("strong",[_("code",[this._v("FTP")])])])]),this._v(" "),_("li",[_("p",[_("strong",[_("code",[this._v("SMTP")])])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[_("p",[_("strong",[this._v("TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。")])])]),this._v(" "),_("li",[_("p",[_("strong",[this._v("虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为")])])]),this._v(" "),_("li",[_("p",[_("strong",[this._v("对数据准确性要求高，速度可以相对较慢的，可以选用TCP")])])])])}],e=r(0),i=Object(e.a)({},function(){var t=this,_=t.$createElement,r=t._self._c||_;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("br"),t._v(" "),r("author",{attrs:{time:"2019年08月28日"}}),t._v(" "),r("br"),t._v(" "),t._m(1),t._v(" "),r("br"),t._v(" "),r("p",[t._v("当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如，当你想查看网页或查看电子邮件时，希望完整且按顺序查看网页，而不丢失任何内容。当你下载文件时，希望获得的是完整的文件，而不仅仅是文件的一部分，因为如果数据丢失或乱序，都不是你希望得到的结果，于是就用到了TCP。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(2),t._v(" "),r("br"),t._v(" "),r("p",[t._v("TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。")]),t._v(" "),r("br"),t._v(" "),r("p",[t._v("在因特网协议族（Internet protocol suite）中，TCP 层是位于 IP 层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是 IP 层不提供这样的流机制，而是提供不可靠的包交换。")]),t._v(" "),r("p",[t._v("应用层向 TCP 层发送用于网间传输的、用8位字节表示的数据流，然后 TCP 把数据流分区成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。")]),t._v(" "),r("p",[t._v("之后 TCP 把结果包传给 IP 层，由它来通过网络将包传送给接收端实体的 TCP 层。TCP 为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；")]),t._v(" "),r("p",[t._v("如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP 用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(3),t._v(" "),r("br"),t._v(" "),t._m(4),t._v(" "),r("br"),t._v(" "),r("p",[t._v("对于 TCP 头部来说，以下几个字段是很重要的：")]),t._v(" "),t._m(5),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(6),t._v(" "),r("br"),t._v(" "),r("p",[t._v("如下图所示，可以看到建立一个TCP连接的过程为（三次握手的过程）:")]),t._v(" "),t._m(7),t._v(" "),r("br"),t._v(" "),r("p",[t._v("首先假设主动发起请求的一端称为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 是一个全双工的协议。")]),t._v(" "),r("p",[t._v("起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后便进入 LISTEN 状态，此时开始等待客户端发送数据。")]),t._v(" "),r("br"),t._v(" "),t._m(8),t._v(" "),r("br"),t._v(" "),t._m(9),t._v(" "),r("br"),t._v(" "),t._m(10),t._v(" "),r("br"),t._v(" "),t._m(11),t._v(" "),r("br"),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),r("br"),t._v(" "),t._m(14),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(15),t._v(" "),r("br"),t._v(" "),t._m(16),t._v(" "),r("br"),t._v(" "),r("p",[t._v("TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。")]),t._v(" "),r("br"),t._v(" "),t._m(17),t._v(" "),r("br"),t._v(" "),t._m(18),t._v(" "),r("br"),t._v(" "),t._m(19),t._v(" "),r("br"),t._v(" "),t._m(20),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(21),t._v(" "),r("br"),t._v(" "),t._m(22),t._v(" "),r("p",[t._v("面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(23),t._v(" "),r("p",[t._v("每条 TCP 传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(24),t._v(" "),r("p",[t._v("TCP 不像 UDP 一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(25),t._v(" "),r("p",[t._v("对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(26),t._v(" "),r("p",[t._v("当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(27),t._v(" "),r("p",[t._v("TCP 允许通信双方的应用程序在任何时候都能发送数据，因为 TCP 连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP 可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）。")]),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(28),t._v(" "),r("br"),t._v(" "),t._m(29),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),r("br"),t._v(" "),t._m(32),t._v(" "),t._m(33)],1)},s,!1,null,null,null);_.default=i.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{168:function(t,s,a){t.exports=a.p+"assets/img/1.497a3f12.jpg"},169:function(t,s,a){t.exports=a.p+"assets/img/2.22900968.png"},170:function(t,s,a){t.exports=a.p+"assets/img/3.3723793c.jpg"},407:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？","aria-hidden":"true"}},[this._v("#")]),this._v(" 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。")]),this._v(" 所以，执行效率是算法一个非常重要的考量指标。那如何来衡量编写的算法代码的执行效率呢？这里就要用到：时间、空间复杂度分析。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("只要讲到数据结构与算法，就一定离不开时间、空间复杂度分析。"),s("u",[s("strong",[this._v("复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半")]),this._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"为什么需要复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要复杂度分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么需要复杂度分析")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("所以，我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法执行效率的方法。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("复杂度：")]),this._v(" "),s("p",[this._v("复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。")]),this._v(" "),s("p",[s("img",{attrs:{src:a(168),alt:""}})])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"复杂度表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度表示法","aria-hidden":"true"}},[this._v("#")]),this._v(" 复杂度表示法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("int "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tint sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tint i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tint j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 "),s("code",[this._v("unit_time")]),this._v("，按照这个思路，我们计算上面代码的执行时间如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("第 2、3、4 行代码执行时间：（1 + 1 + 1）unit_time；\n\n第 5、6 行代码执行时间：（n + n）unit_time；\n\n第 7、8 行代码执行时间：（n*n + n*n）unit_time；\n\n总时间：T(n)= （2*n*n + 2n + 3）* unit_time；\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(169),alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度","aria-hidden":"true"}},[this._v("#")]),this._v(" 时间复杂度")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的例子其实就是："),s("strong",[this._v("大O时间复杂度表示法")]),this._v(" 。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度，简称时间复杂度。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"时间复杂度分析方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度分析方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 时间复杂度分析方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"几种常见时间复杂度实例分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几种常见时间复杂度实例分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 几种常见时间复杂度实例分析")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(170),alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。")]),this._v(" 所以，非多项式时间复杂度的算法其实是非常低效的算法。因此，关于 NP 时间复杂度我就不展开讲了。我们主要来看几种常见的多项式时间复杂度。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[s("strong",[this._v("常量阶 "),s("code",[this._v("O(1)")])])]),this._v(" "),s("p",[this._v("一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是 "),s("code",[this._v("Ο(1)")]),this._v("。")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[a("strong",[t._v("对数阶"),a("code",[t._v("O(logn)")]),t._v("、线性对数阶"),a("code",[t._v("O(nlogn)")])])]),t._v(" "),a("p",[t._v("对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。举例如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ti "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。实际上，变量 i 的取值就是一个等比数列。所以，这段代码的时间复杂度就是 O(log2n)。")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("注意：")]),t._v(" "),a("p",[t._v("在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。")])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v("O(m+n)")]),t._v("、"),a("code",[t._v("O(m*n)")])])]),t._v(" "),a("p",[t._v("接下来看一种和前面都不一样的时间复杂度，代码的复杂度由两个数据的规模决定。举例如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("int "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" int n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tint sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tint i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tsum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\tint sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tint j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tsum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。")]),t._v(" "),a("p",[t._v("针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"空间复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 空间复杂度分析")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  int i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    print out a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],r=a(0),e=Object(r.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("br"),t._v(" "),a("author",{attrs:{time:"2019年07月15日"}}),t._v(" "),a("br"),t._v(" "),t._m(1),t._v(" "),a("br"),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),t._m(4),t._v(" "),a("br"),t._v(" "),a("p",[t._v("每当我们评估一段代码时，直接把代码跑一遍，通过统计、监控，就可以得到算法执行的时间和占用的内存大小（学名：事后统计法）。那为什么还要做时间、空间复杂度分析呢？")]),t._v(" "),a("br"),t._v(" "),a("ul",[a("li",[a("p",[a("font",{attrs:{color:"red"}},[a("strong",[t._v("测试结果非常依赖测试环境")])]),t._v(" ：")],1),t._v(" "),a("p",[t._v("测试环境中的硬件不同会对测试结果有很大的影响。")])])]),t._v(" "),a("br"),t._v(" "),a("ul",[a("li",[a("p",[a("font",{attrs:{color:"red"}},[a("strong",[t._v("测试结果受数据规模的影响很大")])]),t._v(" ：")],1),t._v(" "),a("p",[t._v("拿排序算法举例，对同一个排序算法，数据的有序度不同，排序的执行时间就会有很大的差别。甚至是极端情况下，数据如果是有序的，排序算法不需要做任何动作，执行时间就非常短。")])])]),t._v(" "),a("br"),t._v(" "),t._m(5),t._v(" "),a("br"),t._v(" "),t._m(6),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),t._m(7),t._v(" "),a("br"),t._v(" "),a("p",[t._v("算法的执行效率，粗略地讲，就是算法代码执行的时间。但是，如何在不运行代码的情况下，用“肉眼”得到一段代码的执行时间呢？我们拿下面的代码进行举例：")]),t._v(" "),t._m(8),a("br"),t._v(" "),t._m(9),t._v(" "),t._m(10),a("br"),t._v(" "),a("p",[t._v("尽管我们不知道 "),a("code",[t._v("unit_time")]),t._v(" 的值，但是通过上面代码推导的过程，我们可以得到一个非常重要的规律："),a("font",{attrs:{color:"red"}},[a("strong",[t._v("所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比")])]),t._v("。")],1),t._v(" "),a("p",[t._v("我们可以将其总结为一个公式：")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),t._m(13),t._v(" "),a("br"),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("strong",[t._v("时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规之间的增长关系。")])])],1),t._v(" "),a("br"),t._v(" "),t._m(14),t._v(" "),a("p",[t._v("当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那段代码的时间复杂度，就可以记为： T(n) = O(n2)。")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),t._m(15),t._v(" "),a("br"),t._v(" "),a("ul",[a("li",[a("p",[a("font",{attrs:{color:"red"}},[a("strong",[t._v("只关注循环执行次数最多的一段代码")])])],1),t._v(" "),a("p",[t._v("我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了。")])])]),t._v(" "),a("br"),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red"}},[a("strong",[t._v("加法法则：总复杂度等于量级最大的那段代码的复杂度")])])],1)]),t._v(" "),a("br"),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red"}},[a("strong",[t._v("乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积")])])],1)]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),t._m(16),t._v(" "),a("br"),t._v(" "),t._m(17),t._v(" "),a("p",[t._v("对于罗列的复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2n) 和 O(n!)。")]),t._v(" "),t._m(18),t._v(" "),a("br"),t._v(" "),t._m(19),t._v(" "),a("br"),t._v(" "),t._m(20),t._v(" "),a("br"),t._v(" "),t._m(21),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),t._m(22),t._v(" "),a("br"),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("strong",[t._v("空间复杂度全称就是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。")])])],1),t._v(" "),a("br"),t._v(" "),a("p",[t._v("拿具体的例子来说明：")]),t._v(" "),t._m(23),a("br"),t._v(" "),a("p",[t._v("跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。")]),t._v(" "),a("p",[t._v("我们常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。")])],1)},n,!1,null,null,null);s.default=e.exports}}]);
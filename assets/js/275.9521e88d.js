(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{469:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("br"),t._v(" "),s("author",{attrs:{time:"2019年08月26日"}}),t._v(" "),s("br"),t._v(" "),t._m(1),t._v(" "),s("br"),t._v(" "),t._m(2),t._v(" "),s("br"),t._v(" "),s("p",[t._v("一个函数式组件大概向下面这样：")]),t._v(" "),t._m(3),s("br"),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("render 函数的第二个参数 context 用来代替上下文 this 它是一个包含如下字段的对象：")]),t._v(" "),t._m(5),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("函数式组件只处理状态和行为，它们不会做出任何有关设计和布局的决定。")]),t._v(" "),s("br"),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("假设有一个 a 组件，引入了 a1,a2,a3 三个组件，a 组件的父组件给 a 组件传入了一个 type 属性根据 type 的值 a 组件来决定显示 a1,a2,a3 中的那个组件。这样的场景 a 组件用函数式组件是非常方便的。那么为什么要用函数式组件呢？一句话：渲染开销低，因为函数式组件只是函数。")])],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"vue-函数式组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-函数式组件","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 函数式组件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"函数式组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数式组件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("函数式组件是指用一个 Function 来渲染一个 vue 组件，这个组件只接受一些 prop，我们可以将这类组件标记为 functional，这意味着它无状态 (没有响应式数据)，也没有实例 (没有this上下文)。"),e("strong",[this._v("函数式组件是一个不渲染任何html文本的组件。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  functional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Props 是可选的")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了弥补缺少的实例, 提供第二个参数作为上下文")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("createElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" vNode\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"render-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#render-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" render 函数")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[s("strong",[s("code",[t._v("props")])]),t._v("：提供所有 prop 的对象")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("children")])]),t._v(": VNode 子节点的数组")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("slots")])]),t._v(": 一个函数，返回了包含所有插槽的对象")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("scopedSlots")])]),t._v(": (2.6.0+) 一个暴露传入的作用域插槽的对象。也以函数形式暴露普通插槽。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("data")])]),t._v("：传递给组件的整个数据对象，作为 createElement 的第二个参数传入组件")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("parent")])]),t._v("：对父组件的引用")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("listeners")])]),t._v(": (2.3.0+) 一个包含了所有父组件为当前组件注册的事件监听器的对象。这是 data.on 的一个别名。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("injections")])]),t._v(": (2.3.0+) 如果使用了 inject 选项，则该对象包含了应当被注入的属性;")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"分离表现和行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分离表现和行为","aria-hidden":"true"}},[this._v("#")]),this._v(" 分离表现和行为")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("一个函数式组件的使用场景：")])])}],!1,null,null,null);e.default=a.exports}}]);